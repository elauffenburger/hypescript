// Entrypoint:
ts = _{ SOI ~ top_level_construct* ~ EOI }
/* _ */ top_level_construct = _{ iface_defn | stmt_or_expr }

// Types:
type_ident = { type_ident_type ~ type_ident_part* }
/* _ */ type_ident_type = { literal_type | ident }
/* _ */ type_ident_part = { type_ident_part_operator ~ type_ident_type }
/* _ */ type_ident_part_operator = _{ union | sum }

literal_type = { fn_type | obj_type }

fn_type = { "(" ~ fn_param_list ~ ") => " ~ type_ident }

obj_type = { "{" ~ obj_type_field ~ ("," ~ obj_type_field)* ~ ","? ~ "}" }
/* _ */ obj_type_field = { (ident | ("\"" ~ ident ~ "\"")) ~ optional? ~ ":" ~ type_ident }

fn_param_list = { fn_param ~ ("," ~ fn_param)* }
/* _ */ fn_param = { ident ~ optional? ~ (":" ~ type_ident)? }

// Interfaces:
iface_defn = { "interface" ~ ident ~ "{" ~ iface_defn_body ~ "}" }
/* _ */ iface_defn_body = { (iface_field_defn | iface_method_defn )* }
/* _ */ iface_field_defn = { ident ~ optional? ~ ":" ~ type_ident ~ ";" }
/* _ */ iface_method_defn = { ident ~ "(" ~ fn_param_list ~ ")" }

// Statments & Expressions:
stmt_or_expr = { stmt | expr }

stmt = { (for_loop | if_stmt | let_decl | return_expr | expr) ~ ";"? }
let_decl = { "let" ~ ident ~ (":" ~ type_ident)? ~ assignment? }
return_expr = { ("return " ~ expr) }

expr = { comparison | incr_decr | num | string | ident_assignment | fn_inst | chained_obj_op | obj_inst | ident }
ident_assignment = {ident ~ assignment}
chained_obj_op = { accessable ~ obj_op ~ obj_op* ~ assignment? }
/* _ */ accessable = _{ ident | ( "(" ~ literal_type ~ ")" ) }

incr_decr = { increment | decrement }

increment = { pre_incr | post_incr }
incr_target = { ident }
pre_incr = { "++" ~ incr_target }
post_incr = { incr_target ~ "++" }

decrement = { pre_decr | post_decr }
pre_decr = { "++" ~ incr_target }
post_decr = { incr_target ~ "++" }

comparison = { comparison_term ~ comparison_op ~ comparison_term }
comparison_term = { incr_decr | num | string | chained_obj_op | ident | ( "(" ~ comparison ~ ")" ) }
comparison_op = { "==" | "!=" | "<" | ">" | "%" | "&&" }

for_loop = { "for" ~ "(" ~ let_decl ~ ";" ~ expr ~ ";" ~ expr ~ ")" ~ "{" ~ stmt_or_expr* ~ "}" }
if_stmt = { "if" ~ "(" ~ expr ~ ")" ~ "{" ~ stmt_or_expr* ~ "}" ~ else_if_stmt* ~ else_stmt? }
/* _ */ else_if_stmt = { "else" ~ "if" ~ "(" ~ expr ~ ")" ~ "{" ~  stmt_or_expr* ~ "}" }
/* _ */ else_stmt = { "else" ~ "{" ~ stmt_or_expr* ~ "}" }

// Objects:
obj_op = { obj_access | obj_invoc | arthm }
/* _ */ obj_access = { "." ~ ident }
/* _ */ obj_invoc = { "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

arthm = { (arthm_op ~ arthm_term)+ }
arthm_term = { ident | num }
arthm_op = _{ add | sub | mult | div | modu }
add = { "+" }
sub = { "-" }
mult = { "*" }
div = { "/" }
modu = { "%" }

obj_inst = { "{" ~ obj_field_inst ~ ("," ~ obj_field_inst)* ~ ","? ~ "}" }
/* _ */ obj_field_inst = { (ident | ("\"" ~ ident ~ "\"")) ~ ":" ~ expr }

assignment = { "=" ~ expr }

fn_inst = { 
	"function" ~ ident? ~ "(" ~ fn_param_list? ~ ")" ~ (":" ~ type_ident)? ~ 
    "{" ~ stmt_or_expr* ~ "}"
}

// Core:
num = @{('0'..'9')+}
string = ${ "\"" ~ str_inner ~ "\"" }
str_inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// Helpers:
ident = ${ !reserved ~ ('a'..'z' | 'A'..'Z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9')*}
optional = { "?" }
union = { "|" }
sum = { "&" }

// TODO: uh, actually impl this.
reserved = _{ "if" | "else" | "for" | "function" | "let" | "const" }

// Pest config:
WHITESPACE = _{" " | "\t" | "\r" | "\n" }